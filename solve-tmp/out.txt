#include <bits/stdc++.h>
#include <unordered_map>

#define ll long long
#define ld long double
#define pl pair<ll, ll>
#define vi vector<ll>
#define vii vector<vi>
#define vc vector<char>
#define vcc vector<vc>
#define vp vector<pl>
#define mi map<ll,ll>
#define mc map<char, ll>
#define sortx(X) sort(X.begin(),X.end());
#define all(X) X.begin(),X.end()
#define ln '\n'
#define YES {cout << "YES\n"; return;}
#define NO {cout << "NO\n"; return;}

using namespace std;

const int MODE = 1e9 + 7;

void req(pl &a, pl b) {
    if (a.first < b.first) a = b;
    else if (a.first == b.first) a.second += b.second;
}

void solve(ll tc) {
    ll n;

    cin >> n;

    vi X(n);

    for (int i = 0; i < n; i++)
    {
        cin >> X[i];
    }
    

    vector<vp> Z(n + 1, vp(2));
    
    Z[0][0].second = 1;
    Z[0][1].second = 1;
    
    for (int i = 0; i < n; i++)
    {
        req(Z[i + 1][0], Z[i][0], X[i])
        Z[i + 1][0] = Z[i][0] + X[i];
        Z[i + 1][0] = max(Z[i + 1][0], abs(Z[i][0] + X[i]));
        Z[i + 1][0] = max(Z[i + 1][0], Z[i][1] + X[i]);
        Z[i + 1][0] = max(Z[i + 1][0], abs(Z[i][1] + X[i]));
 
        Z[i + 1][1] = Z[i][0] + X[i];
        Z[i + 1][1] = min(Z[i + 1][1], Z[i][1] + X[i]);
    }

    for (int i = 0; i < n; i++)
    {
        pl re;
        Z[i + 1][0] = Z[i][0];
        Z[i + 1][0].first += X[i];

        if (Z[i + 1][0].first < abs(Z[i][1].first + X[i])){
            Z[i + 1][0] = Z[i][1];
            Z[i + 1][0].first = abs(Z[i + 1][0].first + X[i]);
        }else if (Z[i + 1][0].first == abs(Z[i][1].first + X[i])){
            Z[i + 1][0].second++;
        }
 
        Z[i + 1][1].first = Z[i][1].first + X[i];
    }
    
    cout << Z[n][0].second << '\n';
}


int main()
{
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
    int size = 1;
    //freopen("input.txt", "r", stdin   );
    //freopen("output.txt", "w", stdout);
    cin >> size;
    for (int tc = 1; tc <= size; tc++){
        solve(tc);
       // if (tc != size) cout << '\n';
    }
}
RamyRashad