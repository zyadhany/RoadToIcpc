class Graph
{
public:
	ll size=0;
	vector<vector<ll>> g; 
	vector<ll> lvl;
        vector<vector<ll>> adj,SPT;
	Graph(ll n)
	{
	     size=n;
	     g.resize(n+1);
             lvl.assign(n+1,0);
             SPT.resize(n+1,vector<ll>(ceil(log2(n+1))+1));
	}
	
        void BuildSparse(ll node, ll parent)
        {
            lvl[node] = lvl[parent] + 1;
            SPT[node][0] = parent;
            for (int i = 1; i<SPT[node].size(); i++)
            SPT[node][i] = SPT[SPT[node][i - 1]][i - 1];
            for (auto neg : g[node])
               if (neg != parent) BuildSparse(neg, node);
        }

        ll getpar(ll u, ll k) 
        {
            for (int i = 0; i < SPT[u].size(); i++)
            if ((1 << i) & k) u = SPT[u][i];
            return (u);
        }

       ll LCA(ll u, ll v) 
       {
           if (lvl[u] > lvl[v]) swap(u, v);
           v = getpar(v, lvl[v] - lvl[u]);
           if (u == v) return (u);
           for (int i = SPT[u].size() - 1; i >= 0; i--)
           {
               if (SPT[u][i] != SPT[v][i]){
                   u = SPT[u][i], v = SPT[v][i];
               }
           }
           return (SPT[u][0]);
       }

       ll dist(ll u, ll v) 
       {
           ll p = LCA(u , v);
           return (lvl[u] + lvl[v] - 2 * lvl[p]);
       }
       void AddEdge(ll u,ll v)
       {
	    g[u].pb(v);
       }
};


gr.BuildSparse(1,0);